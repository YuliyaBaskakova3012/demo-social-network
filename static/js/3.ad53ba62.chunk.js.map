{"version":3,"sources":["Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/ProfileInfo.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/MyPosts/Post/Post.jsx","Components/Profile/MyPosts/MyPosts.jsx","Components/Profile/MyPosts/MyPostsContainer.jsx","Components/Profile/ProfileStatusWithHooks.jsx","Components/Profile/ProfileDataForm.jsx","Components/Profile/ProfileInfo.jsx","Components/Profile/Profile.jsx","Components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","message","like","maxLength10","maxLengthCreator","MyPosts","React","memo","postElements","posts","map","p","key","id","likesCount","createRef","postsBlock","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","reduxForm","form","input","meta","handleSubmit","Field","component","Textarea","name","validate","required","placeholder","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileDataFormReduxForm","profile","error","style","formSummaryError","createField","Input","type","Object","keys","contacts","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","photos","large","userPhoto","mainPhoto","target","files","length","initialValues","formData","then","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.ad53ba62.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__3Y_Il\",\"postsBlock\":\"MyPosts_postsBlock__1LSC3\",\"posts\":\"MyPosts_posts__3-LOa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__O63bK\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2010l\",\"contact\":\"ProfileInfo_contact__3g3q4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__pnmxC\"};","import React from 'react';\r\n\r\nimport s from \"./Post.module.css\";\r\n\r\nconst Post=(props)=>{\r\n\r\n return ( \r\n<div className={s.item}><img src=\"https://raduga.net.ru/wp-content/uploads/2020/08/litso-krupnym-planom.jpg\"/>\r\n{props.message}\r\n<div><span>like: {props.like}</span></div>\r\n\r\n</div>\r\n )\r\n}\r\nexport default Post;","import React, { PureComponent } from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from './Post/Post';\r\nconst maxLength10=maxLengthCreator(10);\r\nconst MyPosts=React.memo(props=>{\r\n  //shouldComponentUpdate(nextProps, nextState){\r\n    //return nextProps!==this.props||nextState!==this.state;\r\n  //}\r\n    \r\n      let postElements=props.posts.map((p)=> <Post key={p.id} message={p.message} like={p.likesCount}/>);\r\n    \r\nlet onAddPost=(values) =>{\r\n  props.addPost(values.newPostText)\r\n  }; \r\n  let newPostElement=React.createRef();  \r\n    \r\n return (\r\n  <div className={s.postsBlock}>\r\n    <h3>My posts</h3>\r\n      <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n      <div className={s.posts}>\r\n    {postElements}\r\n      </div>\r\n    </div>\r\n )\r\n})\r\nlet AddNewPostForm=({input, meta, ...props})=>{\r\n  return(\r\n    <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n          <Field component={Textarea} name=\"newPostText\" validate={[required, maxLength10]} placeholder=\"Post message\"/>\r\n          </div>\r\n        <div>\r\n          <button>Add post</button></div>\r\n        </form>\r\n  )\r\n}\r\nlet AddNewPostFormRedux=reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\nexport default MyPosts;","import React from 'react';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer';\r\nimport s from \"./MyPosts.module.css\";\r\nimport {connect} from \"react-redux\";\r\nimport MyPosts from \"./MyPosts\"\r\nconst mapStateToProps=(state)=>{\r\nreturn{\r\n  posts: state.profilePage.posts,\r\n  newPostText: state.profilePage.newPostText\r\n}\r\n}\r\nconst mapDispatchToProps=(dispatch)=>{\r\n  return{\r\n\r\n    addPost: (newPostText)=>{\r\n      dispatch(addPostActionCreator(newPostText))\r\n    }\r\n  }\r\n}\r\nconst MyPostsContainer=connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;","import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\n\r\n\r\nconst ProfileStatusWithHooks=(props)=>{\r\n\r\n let [editMode, setEditMode]=useState(false);\r\n let [status, setStatus]=useState(props.status);\r\n useEffect(()=>{\r\n  setStatus(props.status); \r\n }, [props.status])\r\n const activateEditMode=()=>{\r\nsetEditMode(true);\r\n }\r\n const deactivateEditMode=()=>{\r\nsetEditMode(false);\r\nprops.updateStatus(status);\r\n }\r\n const onStatusChange=(e)=>{\r\n  setStatus(e.currentTarget.value);\r\n }\r\n return (\r\n   <div>\r\n     {!editMode&&\r\n     <div>\r\n  <b>Status:</b> <span onDoubleClick={activateEditMode}>{props.status||\"------\"}</span>\r\n    </div>\r\n  }\r\n  {editMode&&\r\n    <div>\r\n   <input  onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true} value={status}></input>\r\n    </div>\r\n  }\r\n    </div>\r\n )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport { createField, Input, Textarea } from \"../common/FormsControls/FormsControls\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport style from \"../common/FormsControls/FormsControls.module.css\"\r\nconst ProfileDataForm=({handleSubmit, profile, error})=>{\r\n  return <form onSubmit={handleSubmit}>\r\n<div><button>save</button></div>\r\n{error&&<div className={style.formSummaryError}>\r\n  {error}\r\n  </div>}\r\n  <div>\r\n  <b>Full name:</b> {createField(\"Full name\", \"fullName\", [], Input)}\r\n   </div>\r\n <div>\r\n  <b>Looking for a job:</b> {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n   </div>\r\n   \r\n   <div>\r\n  <b>My professional skills:</b> {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n   </div>\r\n   <div>\r\n   <b>About me</b> {createField(\"About me\", \"aboutMe\", [], Textarea)}\r\n   </div>\r\n   <div>\r\n <b>Contacts</b> {Object.keys(profile.contacts).map(key=>{\r\n     return <div className={s.contact}>\r\n       <b>{key}: {createField(key, \"contacts.\"+key, [], Input)}</b>\r\n     </div>\r\n   })}\r\n \r\n   </div>\r\n   </form>\r\n  }\r\n  const ProfileDataFormReduxForm=reduxForm({form: \"edit-profile\"})(ProfileDataForm)\r\n  export default ProfileDataFormReduxForm;","import React from 'react';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport { useState } from 'react';\r\nimport ProfileDataForm from './ProfileDataForm';\r\nconst ProfileInfo =({profile, status, updateStatus, isOwner,  savePhoto, saveProfile})=>{\r\n  let [editMode, setEditMode]=useState(false);\r\n if(!profile){\r\n   return <Preloader/>\r\n }\r\n const onMainPhotoSelected=(e)=>{\r\nif(e.target.files.length){\r\n  savePhoto(e.target.files[0])\r\n}\r\n }\r\nconst onSubmit=(formData)=>{\r\nsaveProfile(formData).then(\r\n  ()=>{\r\n    setEditMode(false);\r\n  }\r\n)\r\n}\r\n \r\n return (\r\n  <div>\r\n      <div className=\"descriptionBlock\">\r\n    <img src={profile.photos.large||userPhoto} className={s.mainPhoto}/>\r\n    {isOwner&&<input type=\"file\" onChange={onMainPhotoSelected}/>}\r\n    {editMode?<ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>:<ProfileData profile={profile} isOwner={isOwner} goToEditMode={()=>{setEditMode(true)}}/>}\r\n  \r\n   <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n   </div>\r\n    </div>\r\n )\r\n}\r\nconst ProfileData=({profile, isOwner, goToEditMode})=>{\r\n return <div>\r\n  {isOwner&&<div><button onClick={goToEditMode}>edit</button></div>}\r\n  <div>\r\n  <b>Full name:</b> {profile.fullName}\r\n   </div>\r\n <div>\r\n  <b>Looking for a job:</b> {profile.lookingForAJob? \"yes\": \"no\"}\r\n   </div>\r\n   {profile.lookingForAJobDescription&&\r\n   <div>\r\n  <b>My professionak skills:</b> {profile.lookingForAJobDescription}\r\n   </div>\r\n}\r\n   <div>\r\n   <b>About me</b> {profile.aboutMe? \"yes\": \"no\"}\r\n   </div>\r\n   <div>\r\n   <b>Contacts</b> {Object.keys(profile.contacts).map(key=>{\r\n     return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n   })}\r\n   </div>\r\n   </div>\r\n}\r\n\r\nconst Contact=({contactTitle, contactValue})=>{\r\n  return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\nexport default ProfileInfo;","import React from 'react';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo';\r\n\r\nconst Profile =(props)=>{\r\n return (\r\n<div>\r\n  <ProfileInfo  \r\n  savePhoto={props.saveProfile}\r\n  isOwner={props.isOwner} \r\n                savePhoto={props.savePhoto} \r\n                saveProfile={props.saveProfile} \r\n                profile={props.profile} \r\n                status={props.status}\r\n                updateStatus={props.updateStatus}/>\r\n  <MyPostsContainer/>  \r\n </div>\r\n )\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport { compose } from 'redux';\r\nclass ProfileContainer extends React.Component{\r\nrefreshProfile(){\r\n    let userId=this.props.match.params.userId;\r\n  if(!userId){\r\n    userId=this.props.authorizedUserId;\r\n  if(!userId){\r\n    this.props.history.push(\"/login\");\r\n  }\r\n}\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n\r\n}\r\n componentDidMount(){\r\n   this.refreshProfile();\r\n }\r\n componentDidUpdate(prevProps, prevState, snapshot){\r\n   if(this.props.match.userId!=prevProps.match.userId){\r\n     this.refreshProfile();\r\n   }\r\n }\r\nrender(){\r\n // console.log(\"RENDER PROFILE\");\r\n return (\r\n<Profile {...this.props} \r\nisOwner={!this.props.match.params.userId}\r\nprofile={this.props.profile} \r\nstatus={this.props.status}\r\nupdateStatus={this.props.updateStatus}\r\nsavePhoto={this.props.savePhoto}/>\r\n )\r\n}\r\n}\r\n\r\n\r\nlet mapStateToProps=(state)=>({\r\n profile: state.profilePage.profile,\r\n status: state.profilePage.status,\r\n authorizedUserId: state.auth.userId,\r\n isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n  withRouter\r\n  )(ProfileContainer);"],"sourceRoot":""}